#Arguments for fetal subplate segmentation

def load_config(): 
 
    parser.add_argument('-infol_MR', '--input_MR_folder',action='store',dest='in_fol_MR',type=str, help='input MR folder name for training')
    parser.add_argument('-infol_rec', '--input_records_folder',action='store',dest='in_fol_rec',required = True,type=str, help='input record folder name for training')
    parser.add_argument('-infol_GT', '--input_GT_folder',action='store',dest='in_fol_GT',type=str, help='input GT folder name for training')
    parser.add_argument('-rl', '--result_save_locaiton', action='store',dest='result_loc', type=str, help='Output folder name, default: result/conv_style/')
    parser.add_argument('-wl', '--weight_save_location', action='store',dest='weight_loc', type=str, help='Output folder name, default: weights/conv_style/')
    parser.add_argument('-hl', '--history_save_location', action='store',dest='hist_loc', type=str, help='Output folder name, default: history/conv_style/')
    parser.add_argument('-f', '--num_fold',action='store',dest='num_fold',default=10, type=int, help='number of fold for training')
    parser.add_argument('-fi', '--stratified_info_file',action='store', dest='stratified_info',type=str, help='information for stratified fold')
    parser.add_argument('-fs', '--start_fold',action='store',dest='start_fold', type=int, help='number of fold for training')
    parser.add_argument('-fe', '--end_fold',action='store',dest='end_fold', type=int, default=1, help='number of fold for training')
    parser.add_argument('-is', '--input_shape',action='store', dest='isize',type=int, nargs='+',default=[192,192], help='Input size ex.-is 100 100')
    parser.add_argument('-bs', '--batch_size',action='store', dest='bsize',type=int, default=30, help='batch size')
    parser.add_argument('-e', '--epoch',action='store',dest='epoch',default=1500,  type=int, help='Number of epoch for training')
    parser.add_argument('-s', '--conv_style', choices=['basic','res','dense','RCL'], default='basic', action='store',dest='style', type=str, help='Conv block style')
    parser.add_argument('-n', '--conv_num', default=3, action='store',dest='ite', type=int, help='Number of convolution in block')
    parser.add_argument('-mnt', '--monitor', choices=['val_loss','loss','dice_coef','val_dice_coef'], default='val_loss', action='store',dest='monitor', type=str, help='variable to monitor')
    parser.add_argument('-d', '--model_depth', default=4, action='store',dest='depth', type=int, help='Deep learning model detph')
    parser.add_argument('-c', '--n_channel', default=32, action='store',dest='dim', type=int, help='Start convolution channel size')
    parser.add_argument('-i', '--kernel_initial', choices=['he_normal', 'TruncatedNormal', 'RandomNormal'], default='he_normal', action='store',dest='init', type=str, help='Convolution weight initial method')
    parser.add_argument('-a', '--activation', choices=['elu', 'relu'], default='elu', action='store',dest='acti', type=str, help='Activation method')
    parser.add_argument('-lr', '--learning_rate', default=1e-4, action='store',dest='lr', type=float, help='Learning rate')
    parser.add_argument('-l', '--loss', choices=['hyb_loss', 'hyb_loss2', 'ori_dice_loss', 'dice_loss','dis_dice_loss','focal_tversky_loss','dis_loss','focal_loss','hyb_disdice_focal_loss','asymmetric_focal_tversky_loss','focal_loss_2','SSIM_loss','hyb_ssim_focal_tversky_loss','focal_loss_3'], default='dice_loss', action='store',dest='loss', type=str, help='Loss function')
    parser.add_argument('-m', '--metric', choices=['dice_coef', 'dis_dice_coef'], default=['dice_coef'], nargs='*', action='store',dest='coef', help='Eval metric')
    parser.add_argument('-p', '--predict_only', action='store_false', dest='to', help='Training off option')
    parser.add_argument('-gpu', '--gpu_number',action='store',dest='gpu',type=int, default=-1, help='Select GPU')
    parser.add_argument('-il', '--input_axisdim',action='store', dest='iaxis',type=int, nargs='+', default=[7,7,4], help='Input size ex.-is 7 7 4')
    parser.add_argument('-opt', '--optimizer',action='store', dest='opt',type=str, choices=['Adam', 'SGD','RAdam'],default="Adam", help='define which optimizer to use')
    parser.add_argument('-wr','--SGDR_restart', dest='restart', action='store_true')
    parser.add_argument('-axi','--axial_training', dest='axial_training', action='store_true')
    parser.add_argument('-cor','--cor_training', dest='cor_training', action='store_true')
    parser.add_argument('-sag','--sag_training', dest='sag_training', action='store_true')
    parser.add_argument('-all','--all_training', dest='all_training', action='store_true')
    parser.add_argument('-fp','--flip', dest='flip_images', action='store_true')
    parser.add_argument('-nv','--no_validate', dest='no_validate', action='store_true')
    parser.add_argument('-tb','--use_tensorboard', dest='tensorboard', action='store_true')
    parser.add_argument('-uf','--use_folder', dest='use_folder', action='store_true')
    parser.add_argument('-mgpu','--multigpu', dest='multi_gpu', action='store_true')
    parser.add_argument('-mw','--multi_worker', dest='multi_worker', action='store_true')
    parser.add_argument('-minlr', '--min_learning_rate', default=1e-7, action='store',dest='min_lr', type=float, help='min Learning rate')
    parser.add_argument('-maxlr', '--max_learning_rate', default=0.1, action='store',dest='max_lr', type=float, help='max Learning rate')
    parser.add_argument('-lrf', '--lr_finder', dest='lr_finder', action='store_true',help='learning rate finder')
    parser.add_argument('-aug', '--augment', dest='aug', action='store_true',help='augment images')
    parser.add_argument('-sm', '--split_method', choices=['skf', 'no_split','percent'], default=['percent'], action='store',dest='split_method', help='split method to use')
    
    config = parser.parse_args()  